'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = Line;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('../../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function getCornerArc(cornerArcRadius, clockwise, diffX, diffY) {
    return 'a' + cornerArcRadius + ',' + cornerArcRadius + ' 0 0 ' + (clockwise >> 0) + ' ' + diffX + ',' + diffY;
}

var pmod = function pmod(num, base) {
    return (num % base + base) % base;
};

function getLinePart(_ref) {
    var radiusA = _ref.radiusA,
        radiusB = _ref.radiusB,
        path = _ref.path,
        lastDirection = _ref.lastDirection,
        distance = _ref.distance,
        direction = _ref.direction,
        index = _ref.index,
        end = _ref.end;

    var vertical = direction % 2;
    var horizontal = 1 - vertical;

    var reverse = Math.pow(-1, (direction < 2) >> 0);
    var polarity = Math.pow(-1, vertical);

    var vectorType = ['h', 'v'][vertical];

    if (index === 0) {
        var _vector = (radiusB - distance) * reverse * polarity;
        var _line = '' + vectorType + _vector;

        return path + ' ' + _line;
    }

    var vector = (radiusA + radiusB * (!end >> 0) - distance) * reverse * polarity;
    var line = '' + vectorType + vector;

    var cornerArcDiffX = radiusA * (Math.pow(-1, (lastDirection === constants.WEST) >> 0) * vertical - reverse * horizontal);

    var cornerArcDiffY = radiusA * (Math.pow(-1, (lastDirection === constants.NORTH) >> 0) * horizontal + reverse * vertical);

    var clockwise = (pmod(lastDirection - direction, 4) === 1) >> 0;

    var cornerArc = getCornerArc(radiusA, clockwise, cornerArcDiffX, cornerArcDiffY);

    return path + ' ' + cornerArc + ' ' + line;
}

function getPoint(_ref2, gridSize) {
    var _ref3 = _slicedToArray(_ref2, 2),
        xValue = _ref3[0],
        yValue = _ref3[1];

    return [xValue * gridSize, (constants.BOARD_HEIGHT - yValue) * gridSize];
}

function Line(_ref4) {
    var gridSize = _ref4.gridSize,
        start = _ref4.start,
        parts = _ref4.parts,
        props = _objectWithoutProperties(_ref4, ['gridSize', 'start', 'parts']);

    var startTransformed = getPoint(start, gridSize);

    var partRadius = parts.map(function (_ref5) {
        var radius = _ref5.radius;
        return gridSize / (radius || 3);
    });

    var _parts$map$reduce = parts.map(function (_ref6) {
        var distance = _ref6.distance,
            rest = _objectWithoutProperties(_ref6, ['distance']);

        return _extends({
            distance: distance * gridSize
        }, rest);
    }).reduce(function (_ref7, _ref8, index) {
        var path = _ref7.path,
            lastDirection = _ref7.lastDirection,
            lastRadius = _ref7.lastRadius;
        var distance = _ref8.distance,
            direction = _ref8.direction;
        return {
            path: getLinePart({
                radiusA: lastRadius,
                radiusB: partRadius[index],
                path: path,
                lastDirection: lastDirection,
                distance: distance,
                direction: direction,
                index: index,
                end: index === parts.length - 1
            }),
            lastDirection: direction,
            lastRadius: partRadius[index]
        };
    }, {
        path: 'M' + startTransformed.join(',')
    }),
        pathString = _parts$map$reduce.path;

    var pathProps = {
        strokeWidth: props.strokeWidth,
        stroke: props.stroke,
        fill: props.fill
    };

    return _react2.default.createElement('path', _extends({ d: pathString }, pathProps));
}

Line.propTypes = {
    strokeWidth: _propTypes2.default.number,
    stroke: _propTypes2.default.string,
    fill: _propTypes2.default.string,
    gridSize: _propTypes2.default.number.isRequired,
    start: _propTypes2.default.array.isRequired,
    parts: _propTypes2.default.array.isRequired
};