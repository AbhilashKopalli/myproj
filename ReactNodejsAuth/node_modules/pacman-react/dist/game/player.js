'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.animatePlayer = animatePlayer;

var _constants = require('../constants');

var _movement = require('./movement');

function getEatenFood(food, player, newPosition) {
    var _orderPolarity = (0, _movement.orderPolarity)(player.direction),
        plane = _orderPolarity.plane,
        polarity = _orderPolarity.polarity;

    return food.findIndex(function (_ref) {
        var position = _ref.position,
            eaten = _ref.eaten;
        return !eaten && position[1 - plane] === player.position[1 - plane] && polarity * position[plane] >= polarity * player.position[plane] && polarity * position[plane] <= polarity * newPosition[plane];
    });
}

function getNewPlayerVector(player, time) {
    try {
        var _getNewPosition = (0, _movement.getNewPosition)(player.position, player.direction, _constants.PLAYER_SPEED, time),
            newPosition = _getNewPosition.newPosition,
            movedDistance = _getNewPosition.movedDistance;

        if (player.nextDirection !== player.direction) {
            var changedVector = (0, _movement.getChangedVector)(player.position, newPosition, player.direction, player.nextDirection, movedDistance);

            if (changedVector) {
                return { position: changedVector, direction: player.nextDirection };
            }
        }

        return { position: newPosition };
    } catch (err) {
        // wrapped

        return {};
    }
}

function eatMonsters(state) {
    return _extends({}, state, {
        monsters: state.monsters.map(function (monster) {
            return _extends({}, monster, {
                eatingTime: _constants.EATING_TIME_SECONDS
            });
        })
    });
}

function animatePlayer(state, time) {
    var newVector = getNewPlayerVector(state.player, time);
    var eatenFoodIndex = getEatenFood(state.food, state.player, newVector.position);
    var food = state.food.slice();
    var scoreDelta = 0;
    if (eatenFoodIndex > -1) {
        food[eatenFoodIndex].eaten = true;

        scoreDelta = 1 + (food[eatenFoodIndex].big >> 0);
    }

    var eating = eatenFoodIndex > -1 && food[eatenFoodIndex].big;

    var nextState = _extends({}, state, {
        score: state.score + scoreDelta,
        player: _extends({}, state.player, newVector),
        food: food
    });

    if (eating) {
        return eatMonsters(nextState);
    }

    return nextState;
}