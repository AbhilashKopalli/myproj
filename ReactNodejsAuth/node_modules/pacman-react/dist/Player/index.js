'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('../constants');

var _helpers = require('../helpers');

require('./style.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ANIMATION_SPEED = 30;

function pacmanPath(radius, angle, offset) {
    if (!angle) {
        return ['M0,' + radius, 'A' + radius + ',' + radius + ' 0 1 0 ' + radius * 2 + ',' + radius, 'A' + radius + ',' + radius + ' 0 1 0 0,' + radius].join(' ');
    }

    var offsetX = radius * Math.cos(angle / 2);
    var offsetY = radius * Math.sin(angle / 2);

    var polarity = Math.pow(-1, Math.floor(offset / 2));

    var m00 = (offset + 1) % 2 * polarity;
    var m01 = offset % 2 * polarity;

    var biteX1 = offsetX * m00 - offsetY * m01;
    var biteY1 = -offsetX * m01 - offsetY * m00;
    var biteX2 = offsetX * m00 + offsetY * m01;
    var biteY2 = -offsetX * m01 + offsetY * m00;

    var arcFlag = (angle < Math.PI) >> 0;

    return ['M' + radius + ',' + radius, 'L' + (radius + biteX1) + ',' + (radius + biteY1), 'A' + radius + ',' + radius, '0 ' + arcFlag + ' 0', radius + biteX2 + ',' + (radius + biteY2), 'L' + radius + ',' + radius].join(' ');
}

var Player = function (_Component) {
    _inherits(Player, _Component);

    function Player(props) {
        _classCallCheck(this, Player);

        var _this = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, props));

        _this.state = {
            angle: 1,
            timerBite: null,
            timerLose: null
        };

        _this.startTime = Date.now();
        return _this;
    }

    _createClass(Player, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            this.setState({
                timerBite: setInterval(function () {
                    return _this2.setState({
                        angle: 1 + 0.5 * Math.sin((Date.now() - _this2.startTime) / 50)
                    });
                }, ANIMATION_SPEED)
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            clearInterval(this.state.timerBite);
            clearTimeout(this.state.timerLose);
        }
    }, {
        key: 'onLoseAnimation',
        value: function onLoseAnimation() {
            var _this3 = this;

            if (this.state.angle < Math.PI * 2) {
                return setTimeout(function () {
                    _this3.setState({
                        angle: Math.min(Math.PI * 2, _this3.state.angle + 0.1),
                        timerLose: _this3.onLoseAnimation()
                    });
                }, ANIMATION_SPEED);
            }

            if (this.props.onEnd) {
                setImmediate(function () {
                    return _this3.props.onEnd();
                });
            }

            return null;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (!prevProps.lost && this.props.lost) {
                clearInterval(this.state.timerBite);
                clearTimeout(this.state.timerLose);

                this.setState({ angle: 0, timerLose: this.onLoseAnimation() });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                gridSize = _props.gridSize,
                lost = _props.lost,
                position = _props.position,
                direction = _props.direction;


            var pathProps = {
                stroke: 'none',
                fill: 'yellow'
            };

            var radius = gridSize * _constants.PLAYER_RADIUS;

            var style = _extends({}, (0, _helpers.cssPosition)(position, gridSize), {
                width: radius * 2,
                height: radius * 2,
                marginLeft: -radius,
                marginTop: -radius
            });

            var offset = lost ? 1 : direction;

            return _react2.default.createElement(
                'svg',
                { className: 'pacman-player', style: style },
                _react2.default.createElement('path', _extends({ d: pacmanPath(radius, this.state.angle, offset) }, pathProps))
            );
        }
    }]);

    return Player;
}(_react.Component);

exports.default = Player;


Player.propTypes = {
    animate: _propTypes2.default.bool,
    gridSize: _propTypes2.default.number.isRequired,
    lost: _propTypes2.default.bool.isRequired,
    position: _propTypes2.default.array.isRequired,
    direction: _propTypes2.default.number.isRequired,
    onEnd: _propTypes2.default.func
};